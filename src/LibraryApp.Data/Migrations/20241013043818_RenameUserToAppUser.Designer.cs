// <auto-generated />
using System;
using LibraryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Data.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20241013043818_RenameUserToAppUser")]
    partial class RenameUserToAppUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLibrarian")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f9ec9f05-7670-4ded-90db-db0380a7accb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6f186cd-7d36-4831-b1ea-f01a0fe16988",
                            Email = "Aisha.Huel@yahoo.com",
                            EmailConfirmed = false,
                            IsLibrarian = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FLO74@GMAIL.COM",
                            NormalizedUserName = "HOLLIE_JACOBSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJZ1pdv82lB3YuiFUX3cdD/+WCFO4V+ngfScwPTXtZhSYnMyWU7SQgZZ2NNIHifA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85e85f0c-55f3-4781-8c72-892ad12e9205",
                            TwoFactorEnabled = false,
                            UserName = "Jalon_Goyette"
                        },
                        new
                        {
                            Id = "884609cc-0d1d-4cfd-9aef-073a25a2a7cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d777ac8a-1726-48d2-b0df-fd5f34ae9b60",
                            Email = "Ursula_Cartwright@yahoo.com",
                            EmailConfirmed = false,
                            IsLibrarian = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KARLEY_SCHUMM74@YAHOO.COM",
                            NormalizedUserName = "HOWELL39",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQ/W6VAMhqnNI9J6q5Tzp1f4c3v9tqWk8Ppux1592TZQR/KCEhgRe+67zmFmI6OkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4653215e-f89e-49e9-9df7-a474ac9ff9ee",
                            TwoFactorEnabled = false,
                            UserName = "Karen_Hammes"
                        },
                        new
                        {
                            Id = "dc7acf01-de50-4766-9eef-b2c8c321addd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3d55cda-308e-4949-87f5-25ab94082617",
                            Email = "Myra_Kassulke53@yahoo.com",
                            EmailConfirmed = false,
                            IsLibrarian = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MELYNA.RENNER65@YAHOO.COM",
                            NormalizedUserName = "BRYON.RAYNOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOiR50/ruEbRLJAbazsiToHxSDFSQus9QhRRFMjy7ioMlIE8cyX/wrxJOtE9ERSr4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c56ae9a-27c9-4850-96e7-a502fb2afd3d",
                            TwoFactorEnabled = false,
                            UserName = "Tressa_Turner"
                        },
                        new
                        {
                            Id = "136a7a21-9774-4bba-8287-601af382879b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a46c0ae-38b7-4bf4-9f2a-353e6c6c8e5e",
                            Email = "Paolo71@gmail.com",
                            EmailConfirmed = false,
                            IsLibrarian = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMENICK33@HOTMAIL.COM",
                            NormalizedUserName = "IRVING.LAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENOzPTx1ORNG7ikBj+VBRmv3ZsDNrBsCYJ7oWYrAwSiMfUSJJmOJGpAgtnuvD7Zs+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "947ce4e9-ce68-4606-a0c8-4741665ca48c",
                            TwoFactorEnabled = false,
                            UserName = "Ewald_Ortiz"
                        },
                        new
                        {
                            Id = "95ffd13d-2f17-4988-ac68-bca469936740",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e75fa30f-5b84-4767-b376-41fd0dd14331",
                            Email = "Nora.Kuhic79@hotmail.com",
                            EmailConfirmed = false,
                            IsLibrarian = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SALVATORE67@YAHOO.COM",
                            NormalizedUserName = "RUSTY.ANKUNDING27",
                            PasswordHash = "AQAAAAIAAYagAAAAEPyoIiChS/HhkmqPWpepnmSZN0ChjEIulLYVLHRowdqUxh1N6+SBSk+jsz8javTNVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07914df5-b71c-497f-a5e0-36068399f4f3",
                            TwoFactorEnabled = false,
                            UserName = "Ena.Nicolas72"
                        },
                        new
                        {
                            Id = "f697fe75-c521-410d-bb21-1547b16cff21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3a8df08-c2cb-40eb-9036-95c017110ae5",
                            Email = "Dino_Hilpert@hotmail.com",
                            EmailConfirmed = false,
                            IsLibrarian = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRENDEN33@HOTMAIL.COM",
                            NormalizedUserName = "AHMAD69",
                            PasswordHash = "AQAAAAIAAYagAAAAEHrmG0K6VHiJeqWSyoAOp3p8GNBJDoQ4GpeIvSQ2Y6sK7Vjd8vim9BAI3+4IdPWPsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "062cbe00-b0eb-4c40-9d9b-6674a93b672d",
                            TwoFactorEnabled = false,
                            UserName = "Stacy28"
                        },
                        new
                        {
                            Id = "f913b48d-196d-404c-912f-1ccfb47df40d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f13e5721-6f9f-4157-addb-8ec1892b24a6",
                            Email = "Elliott.Macejkovic42@yahoo.com",
                            EmailConfirmed = false,
                            IsLibrarian = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ABBIGAIL.LAKIN88@HOTMAIL.COM",
                            NormalizedUserName = "MARCELLUS.EFFERTZ70",
                            PasswordHash = "AQAAAAIAAYagAAAAEKGegp9uqnviazM/GYBiYDr1hMR09/8MUq4l6y8/fwxni73oZL12c9Ku/EVgCVyWyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc9a95f5-ec68-40fe-9bcc-0193687e6ab2",
                            TwoFactorEnabled = false,
                            UserName = "Madonna.Predovic"
                        },
                        new
                        {
                            Id = "2ce3a1a6-070a-48e1-ac31-e624c9cce708",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e374ace4-fed8-45ff-a034-8405c4b18e89",
                            Email = "Davon73@gmail.com",
                            EmailConfirmed = false,
                            IsLibrarian = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARISOL_JACOBSON36@GMAIL.COM",
                            NormalizedUserName = "TYLER98",
                            PasswordHash = "AQAAAAIAAYagAAAAEHwxblrVk5X+lCp2KVm4nSQ9SHZeSizdPR8XNNymUCLhdn2HFdH7/xMp+TN+sUXJ3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8f67078-f83c-4d30-b68d-20cfb0223b83",
                            TwoFactorEnabled = false,
                            UserName = "Adolfo.Jakubowski"
                        },
                        new
                        {
                            Id = "c94f7f74-4064-45d1-a712-d127c3b69ffd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7ddd5d9-9057-4052-81e0-5d42d1a62c1a",
                            Email = "Maegan14@yahoo.com",
                            EmailConfirmed = false,
                            IsLibrarian = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEKHI_RUNOLFSSON@GMAIL.COM",
                            NormalizedUserName = "TYREL_FLATLEY18",
                            PasswordHash = "AQAAAAIAAYagAAAAECBWb6eX1jB6+p3o/F5698fFMtm9X7O2ed/TR2/SGjHbrZgXc8/LDTDPNUxX6Iz90Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f2a4528-d3cb-42d0-995d-6bc1d68a24ec",
                            TwoFactorEnabled = false,
                            UserName = "Howard_Waelchi"
                        },
                        new
                        {
                            Id = "dcedffdf-a7ff-4f84-96e2-b1291c88fce3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd612ada-0442-456a-a391-5719ec7370cb",
                            Email = "Scotty5@yahoo.com",
                            EmailConfirmed = false,
                            IsLibrarian = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VANCE_WELCH@HOTMAIL.COM",
                            NormalizedUserName = "DEVYN_DAUGHERTY82",
                            PasswordHash = "AQAAAAIAAYagAAAAECbWPyWUEGjjQBPf6damtQA/LXIY39/IWPOF40AZTlQ9mITAjE101+f3VL12asp2zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e6b9cc4-2624-4de3-bc68-8684a1a15270",
                            TwoFactorEnabled = false,
                            UserName = "Howell8"
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Gwen Dickinson",
                            AverageRating = 0.0,
                            Category = "Health",
                            Description = "Vel laudantium enim eius quae rem iste. Consequuntur nesciunt voluptas eligendi architecto voluptatem voluptatum.",
                            ISBN = "7026769209457",
                            PageCount = 255,
                            PublicationDate = new DateTime(2017, 7, 9, 11, 42, 22, 727, DateTimeKind.Local).AddTicks(4828),
                            Publisher = "Ullrich Group",
                            Title = "Commodi quis itaque."
                        },
                        new
                        {
                            Id = 2,
                            Author = "Johnnie Brekke",
                            AverageRating = 0.0,
                            Category = "Baby",
                            Description = "Impedit sit dolorem provident ullam. Facilis quaerat non blanditiis rem. Quo velit in. Mollitia tempore quam voluptatem voluptate maiores rerum repudiandae.",
                            ISBN = "1998857783186",
                            PageCount = 586,
                            PublicationDate = new DateTime(2012, 7, 1, 0, 29, 18, 212, DateTimeKind.Local).AddTicks(3308),
                            Publisher = "Wuckert - Stroman",
                            Title = "Dolore debitis voluptatem."
                        },
                        new
                        {
                            Id = 3,
                            Author = "Shaun Hansen",
                            AverageRating = 0.0,
                            Category = "Toys",
                            Description = "Provident animi iusto minima libero. Rerum quod inventore occaecati voluptatibus mollitia et. Incidunt aut tenetur animi.",
                            ISBN = "6164882946550",
                            PageCount = 264,
                            PublicationDate = new DateTime(2017, 12, 28, 16, 15, 55, 728, DateTimeKind.Local).AddTicks(6288),
                            Publisher = "McGlynn - Lueilwitz",
                            Title = "Deleniti assumenda omnis."
                        },
                        new
                        {
                            Id = 4,
                            Author = "Enrique Anderson",
                            AverageRating = 0.0,
                            Category = "Grocery",
                            Description = "Est dolorem dolores est possimus. Et eum numquam quia illum. Qui minus quia nisi architecto. Voluptas totam sed et sed rerum.",
                            ISBN = "9208115121776",
                            PageCount = 514,
                            PublicationDate = new DateTime(2021, 11, 29, 15, 59, 12, 243, DateTimeKind.Local).AddTicks(2263),
                            Publisher = "Toy - Hammes",
                            Title = "Voluptatibus laudantium laboriosam."
                        },
                        new
                        {
                            Id = 5,
                            Author = "Brooke O'Conner",
                            AverageRating = 0.0,
                            Category = "Movies",
                            Description = "Dolorem maxime non molestiae libero et. Culpa quia ad sequi amet recusandae. Enim magnam voluptate necessitatibus quam quod facilis. Et error dignissimos commodi corporis sit voluptas. Omnis itaque eligendi delectus asperiores explicabo laudantium nobis est pariatur.",
                            ISBN = "1843574108531",
                            PageCount = 498,
                            PublicationDate = new DateTime(2023, 1, 8, 12, 53, 42, 218, DateTimeKind.Local).AddTicks(3236),
                            Publisher = "Nikolaus - Little",
                            Title = "Adipisci id sit."
                        },
                        new
                        {
                            Id = 6,
                            Author = "Jeremy Konopelski",
                            AverageRating = 0.0,
                            Category = "Books",
                            Description = "Quis illo sed eius alias ducimus doloremque provident. At voluptas eum impedit rerum qui. Porro praesentium laboriosam natus magnam. Omnis repudiandae reiciendis sed perferendis assumenda qui delectus. Nesciunt dolores nam placeat et nesciunt blanditiis aliquid.",
                            ISBN = "6609429991285",
                            PageCount = 668,
                            PublicationDate = new DateTime(2023, 12, 10, 4, 55, 44, 540, DateTimeKind.Local).AddTicks(742),
                            Publisher = "Collins - Goldner",
                            Title = "Quis sit nostrum."
                        },
                        new
                        {
                            Id = 7,
                            Author = "Woodrow Haley",
                            AverageRating = 0.0,
                            Category = "Beauty",
                            Description = "Molestias facilis quae. Error asperiores quam et dolores. Deserunt quia nisi consectetur eos quas laborum esse. Alias est eveniet sed rerum necessitatibus.",
                            ISBN = "5834562294028",
                            PageCount = 112,
                            PublicationDate = new DateTime(2014, 8, 30, 12, 51, 18, 38, DateTimeKind.Local).AddTicks(7448),
                            Publisher = "Mertz and Sons",
                            Title = "Nam ut eos."
                        },
                        new
                        {
                            Id = 8,
                            Author = "Regina Pagac",
                            AverageRating = 0.0,
                            Category = "Garden",
                            Description = "Modi dolorem itaque harum beatae quasi dolor accusantium. Impedit consectetur non accusamus molestiae quia deleniti nisi.",
                            ISBN = "3166215585156",
                            PageCount = 875,
                            PublicationDate = new DateTime(2007, 12, 3, 19, 34, 22, 390, DateTimeKind.Local).AddTicks(4947),
                            Publisher = "McLaughlin and Sons",
                            Title = "Sit sapiente qui."
                        },
                        new
                        {
                            Id = 9,
                            Author = "Bryan Rosenbaum",
                            AverageRating = 0.0,
                            Category = "Baby",
                            Description = "Rerum sapiente laudantium eos sed laborum quo dolores eaque. Dignissimos qui consectetur quibusdam enim.",
                            ISBN = "2894055962028",
                            PageCount = 930,
                            PublicationDate = new DateTime(2022, 4, 25, 3, 2, 46, 544, DateTimeKind.Local).AddTicks(9786),
                            Publisher = "Schneider Group",
                            Title = "Porro iure reiciendis."
                        },
                        new
                        {
                            Id = 10,
                            Author = "Guillermo Wiegand",
                            AverageRating = 0.0,
                            Category = "Toys",
                            Description = "Quia et voluptatum occaecati voluptas animi itaque quas. Vero aliquam ut qui quae itaque ab maxime aut rerum. Aperiam et consectetur voluptatum.",
                            ISBN = "0047032459246",
                            PageCount = 783,
                            PublicationDate = new DateTime(2015, 2, 19, 7, 14, 9, 366, DateTimeKind.Local).AddTicks(4941),
                            Publisher = "Barrows - Stiedemann",
                            Title = "Sunt maxime ducimus."
                        },
                        new
                        {
                            Id = 11,
                            Author = "Alfonso Medhurst",
                            AverageRating = 0.0,
                            Category = "Computers",
                            Description = "Veniam sequi occaecati eligendi et reiciendis enim fugiat praesentium id. Accusantium eum similique quae consectetur quis laudantium rem est cumque.",
                            ISBN = "3947083267302",
                            PageCount = 448,
                            PublicationDate = new DateTime(2006, 12, 26, 20, 59, 35, 177, DateTimeKind.Local).AddTicks(1947),
                            Publisher = "Little - Borer",
                            Title = "Ea voluptas facilis."
                        },
                        new
                        {
                            Id = 12,
                            Author = "Tasha Dicki",
                            AverageRating = 0.0,
                            Category = "Beauty",
                            Description = "Enim voluptates est amet sit voluptas est magni. Ipsam quas libero impedit aperiam velit et quia.",
                            ISBN = "3389216533388",
                            PageCount = 210,
                            PublicationDate = new DateTime(2020, 9, 5, 2, 41, 6, 299, DateTimeKind.Local).AddTicks(7403),
                            Publisher = "Connelly - Hickle",
                            Title = "Nemo eius ducimus."
                        },
                        new
                        {
                            Id = 13,
                            Author = "Philip Funk",
                            AverageRating = 0.0,
                            Category = "Beauty",
                            Description = "Quis dolorem quis esse consequatur molestiae est nihil quia. Ex et quidem.",
                            ISBN = "2860105088840",
                            PageCount = 206,
                            PublicationDate = new DateTime(2008, 2, 25, 7, 31, 45, 92, DateTimeKind.Local).AddTicks(9754),
                            Publisher = "Hodkiewicz - Veum",
                            Title = "Hic aut numquam."
                        },
                        new
                        {
                            Id = 14,
                            Author = "Ricky Stoltenberg",
                            AverageRating = 0.0,
                            Category = "Sports",
                            Description = "Quidem et impedit at id ex ullam. Eveniet vitae dolore laborum ea temporibus soluta mollitia et.",
                            ISBN = "9220263550673",
                            PageCount = 894,
                            PublicationDate = new DateTime(2006, 1, 20, 23, 51, 3, 817, DateTimeKind.Local).AddTicks(316),
                            Publisher = "Pagac - Turcotte",
                            Title = "Error minus alias."
                        },
                        new
                        {
                            Id = 15,
                            Author = "Melinda Rau",
                            AverageRating = 0.0,
                            Category = "Movies",
                            Description = "Molestiae maxime adipisci quis alias dolor molestiae at. Et natus libero non nulla ut totam totam consectetur. Est odit qui deleniti omnis consequatur sed.",
                            ISBN = "2904198284540",
                            PageCount = 242,
                            PublicationDate = new DateTime(2013, 10, 4, 15, 35, 28, 948, DateTimeKind.Local).AddTicks(2444),
                            Publisher = "Hauck, Parisian and Ondricka",
                            Title = "Et qui ut."
                        },
                        new
                        {
                            Id = 16,
                            Author = "Jane Swaniawski",
                            AverageRating = 0.0,
                            Category = "Kids",
                            Description = "Qui quas aut nostrum dolores minus possimus aut esse. Enim ducimus ut. Quaerat ab dicta delectus molestiae dolore eveniet voluptatem labore dolorem. Consectetur atque enim sapiente.",
                            ISBN = "8730972957034",
                            PageCount = 459,
                            PublicationDate = new DateTime(2013, 11, 22, 13, 35, 2, 52, DateTimeKind.Local).AddTicks(6918),
                            Publisher = "O'Keefe - Wyman",
                            Title = "Est deleniti libero."
                        },
                        new
                        {
                            Id = 17,
                            Author = "Irene Spinka",
                            AverageRating = 0.0,
                            Category = "Sports",
                            Description = "Illo dolores sit iste velit. Magnam adipisci inventore quae minima. Facilis error laborum ea labore ut dolorem earum provident. Autem amet voluptate. Est sed aperiam consectetur.",
                            ISBN = "8466942766978",
                            PageCount = 778,
                            PublicationDate = new DateTime(2010, 2, 9, 19, 42, 22, 524, DateTimeKind.Local).AddTicks(2928),
                            Publisher = "Torp LLC",
                            Title = "Voluptatem eaque sed."
                        },
                        new
                        {
                            Id = 18,
                            Author = "Armando Runolfsson",
                            AverageRating = 0.0,
                            Category = "Grocery",
                            Description = "Vero alias ad reprehenderit. Magnam aliquam fuga maiores dolorem nemo error est.",
                            ISBN = "3961147590663",
                            PageCount = 775,
                            PublicationDate = new DateTime(2023, 4, 10, 15, 50, 52, 291, DateTimeKind.Local).AddTicks(3481),
                            Publisher = "Walker - Hoppe",
                            Title = "Earum et voluptates."
                        },
                        new
                        {
                            Id = 19,
                            Author = "Pedro Kunde",
                            AverageRating = 0.0,
                            Category = "Home",
                            Description = "Tempora minima totam culpa et. Voluptates quasi vel molestiae eum inventore beatae quibusdam. Voluptas minus ex. Autem aut aspernatur totam facere ut consequatur. Harum voluptatem voluptates vel mollitia quae.",
                            ISBN = "7188250067011",
                            PageCount = 848,
                            PublicationDate = new DateTime(2008, 10, 30, 20, 45, 53, 598, DateTimeKind.Local).AddTicks(3004),
                            Publisher = "Rohan, Hane and Wiza",
                            Title = "Vel perspiciatis rerum."
                        },
                        new
                        {
                            Id = 20,
                            Author = "Kerry Ernser",
                            AverageRating = 0.0,
                            Category = "Automotive",
                            Description = "Commodi earum et iusto voluptas explicabo repudiandae. At laborum consequatur nulla optio illo. Dolores assumenda esse.",
                            ISBN = "2079369143664",
                            PageCount = 758,
                            PublicationDate = new DateTime(2022, 9, 1, 12, 3, 17, 513, DateTimeKind.Local).AddTicks(6485),
                            Publisher = "Feeney - Murazik",
                            Title = "Aut animi magnam."
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.HasOne("LibraryApp.Models.AppUser", null)
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LibraryApp.Models.Review", b =>
                {
                    b.HasOne("LibraryApp.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Models.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibraryApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibraryApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibraryApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryApp.Models.AppUser", b =>
                {
                    b.Navigation("BorrowedBooks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
